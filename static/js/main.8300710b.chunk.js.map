{"version":3,"sources":["context/analyticsContext/analyticsContext.js","components/Map/MarkerIcon.js","components/Map/Map.js","App.js","serviceWorker.js","context/analyticsContext/analyticsReducer.js","context/types.js","context/analyticsContext/AnalyticsState.js","index.js"],"names":["analyticsContext","createContext","MarkerIcon","props","className","icon","locationIcon","width","height","color","Map","location","zoom","treePlantingActivities","style","bootstrapURLKeys","key","process","GOOGLE_MAP_API_KEY","defaultCenter","defaultZoom","map","tree","index","Latitude","Longitude","lat","lng","text","axios","defaults","baseURL","App","context","useContext","AnalyticsContext","loading","loadTreePlantingActivites","filteredActivities","useState","hasUserLocation","userMessage","name","message","state","setState","useEffect","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","console","log","fetch","then","res","json","catch","error","Boolean","window","hostname","match","action","type","payload","currentActivity","AnalyticsState","useReducer","AnalyticsReducer","dispatch","a","get","data","response","Provider","value","children","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8300710b.chunk.js","sourcesContent":["import React, { createContext } from \"react\";\n\nconst analyticsContext = createContext();\nexport default analyticsContext;\n","import React from \"react\";\nimport { Icon } from \"@iconify/react\";\nimport locationIcon from \"@iconify/icons-mdi/map-marker\";\n\n/***\n *\n */\n\nfunction MarkerIcon(props) {\n    return (\n        <div className=\"pin\">\n            <Icon\n                icon={locationIcon}\n                className=\"pin-icon\"\n                width={25}\n                height={41}\n                color=\"green\"\n            />\n            {/* <p className=\"pin-text\">{text}</p> */}\n        </div>\n    );\n}\n\nexport default MarkerIcon;\n","import React from \"react\";\nimport GoogleMapReact from \"google-map-react\";\nimport MarkerIcon from \"./MarkerIcon\";\nimport \"./map.css\";\n\nfunction Map(props) {\n    const { location, zoom, treePlantingActivities } = props;\n\n    return (\n        <div style={{ height: \"100vh\", width: \"100%\" }}>\n            <GoogleMapReact\n                bootstrapURLKeys={{\n                    key: process.env.GOOGLE_MAP_API_KEY,\n                }}\n                defaultCenter={location}\n                defaultZoom={zoom}\n            >\n                {treePlantingActivities !== null &&\n                    treePlantingActivities.map((tree, index) => {\n                        let position = [tree.Latitude, tree.Longitude];\n                        return (\n                            <MarkerIcon\n                                key={index}\n                                lat={tree.Latitude}\n                                lng={tree.Longitude}\n                                text=\"marker\"\n                            />\n                        );\n                    })}\n            </GoogleMapReact>\n        </div>\n    );\n}\n\nexport default Map;\n","import React, { useContext, useEffect, useState } from \"react\";\n// contexts go here\nimport AnalyticsContext from \"./context/analyticsContext/analyticsContext\";\n\n// map stuff\nimport Map from \"./components/Map/Map\";\nimport GoogleMapReact from \"google-map-react\";\nimport \"./App.css\";\n\nimport axios from \"axios\";\n\naxios.defaults.baseURL = \"https://sitematching.herokuapp.com/api/v1\";\n\nconst App = (props) => {\n    const context = useContext(AnalyticsContext);\n    const {\n        treePlantingActivities,\n        loading,\n        filteredActivities,\n        loadTreePlantingActivites,\n    } = context;\n\n    const [state, setState] = useState({\n        location: {\n            lat: 59.95,\n            lng: 30.33,\n        },\n        zoom: 10, // the lower the higher the map is\n        hasUserLocation: false,\n        userMessage: {\n            name: \"\",\n            message: \"\",\n        },\n    });\n\n    const position = [state.location.lat, state.location.lng];\n\n    useEffect(() => {\n        loadTreePlantingActivites();\n\n        navigator.geolocation.getCurrentPosition(\n            (position) => {\n                setState({\n                    ...state,\n                    location: {\n                        lat: position.coords.latitude,\n                        lng: position.coords.longitude,\n                    },\n                    hasUserLocation: true,\n                    zoom: 8,\n                });\n            },\n            () => {\n                console.log(\"uh..oh, no location provided\");\n                // denied geolocation so we go for ip\n                fetch(\"https://ipapi.co/json\")\n                    .then((res) => res.json())\n                    .then((location) => {\n                        setState({\n                            location: {\n                                lat: location.latitude,\n                                lng: location.longitude,\n                            },\n                            hasUserLocation: true,\n                            zoom: 5,\n                        });\n                    })\n                    .catch((error) => console.log(error));\n            }\n        );\n    }, []);\n\n    if (treePlantingActivities !== null && !loading) {\n        console.log(treePlantingActivities, \"=============\");\n    }\n\n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        setState((prevState) => ({\n            ...state,\n            userMessage: {\n                ...prevState.userMessage,\n                [name]: value,\n            },\n        }));\n    };\n\n    const onSubmit = (e) => {\n        e.preventDefault();\n        console.log(state.userMessage);\n    };\n\n    return (\n        <>\n            {state.hasUserLocation ? (\n                <Map\n                    location={state.location}\n                    zoom={state.zoom}\n                    treePlantingActivities={treePlantingActivities}\n                />\n            ) : (\n                <p> please allow location access </p>\n            )}\n        </>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n    LOAD_TREE_PLANTING_ACTIVITIES,\n    TREE_PLANTING_ERROR,\n    SET_CURRENT,\n    CLEAR_CURRENT,\n} from \"../types\";\n\nexport default (state, action) => {\n    switch (action.type) {\n        case LOAD_TREE_PLANTING_ACTIVITIES:\n            return {\n                ...state,\n                treePlantingActivities: action.payload,\n                loading: false,\n            };\n\n        case SET_CURRENT:\n            return {\n                ...state,\n                currentActivity: action.payload,\n            };\n        case CLEAR_CURRENT:\n            return {\n                ...state,\n                currentActivity: null,\n            };\n        default:\n            return state;\n    }\n};\n","export const LOAD_TREE_PLANTING_ACTIVITIES = \"LOAD_TREE_PLANTING_ACTIVITIES\";\nexport const FILTER_TREES = \"FILTER_TREES\";\nexport const CLEAR_FILTER = \"CLEAR_FILTER\";\nexport const SET_ALERT = \"SET_ALERT\";\nexport const REMOVE_ALERT = \"REMOVE_ALERT\";\nexport const REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\nexport const REGISTER_FAIL = \"REGISTER_FAIL\";\nexport const USER_LOADED = \"USER_LOADED\";\nexport const AUTH_ERROR = \"AUTH_ERROR\";\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGIN_FAIL = \"LOGIN_FAIL\";\nexport const LOGOUT = \"LOGOUT\";\nexport const TREE_PLANTING_ERROR = \"TREE_PLANTING_ERROR\";\nexport const CLEAR_ERRORS = \"CLEAR_ERRORS\";\nexport const SET_CURRENT = \"SET_CURRENT\";\nexport const CLEAR_CURRENT = \"CLEAR_CURRENT\";\nexport const CLEAR_TREES = \"CLEAR_TREES\";\n","import React, { useReducer } from \"react\";\nimport AnalyticsContext from \"./analyticsContext\";\nimport AnalyticsReducer from \"./analyticsReducer\";\n\nimport { LOAD_TREE_PLANTING_ACTIVITIES, TREE_PLANTING_ERROR } from \"../types\";\nimport axios from \"axios\";\n\nconst AnalyticsState = (props) => {\n    const initialState = {\n        treePlantingActivities: null,\n        filteredActivities: null,\n        currentActivity: null,\n        loading: false,\n        error: null,\n    };\n\n    const [state, dispatch] = useReducer(AnalyticsReducer, initialState);\n\n    // Actions go here\n    // get treePlanting Activities\n\n    const loadTreePlantingActivites = async () => {\n        try {\n            const res = await axios.get(\"/locations\");\n            dispatch({\n                type: LOAD_TREE_PLANTING_ACTIVITIES,\n                payload: res.data,\n            });\n        } catch (error) {\n            dispatch({\n                type: TREE_PLANTING_ERROR,\n                payload: error.response.message,\n            });\n        }\n    };\n\n    return (\n        <AnalyticsContext.Provider\n            value={{\n                treePlantingActivities: state.treePlantingActivities,\n                filteredActivities: state.filteredActivities,\n                currentActivity: state.currentActivity,\n                loading: state.loading,\n                error: state.error,\n                loadTreePlantingActivites,\n            }}\n        >\n            {props.children}\n        </AnalyticsContext.Provider>\n    );\n};\n\nexport default AnalyticsState;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"leaflet/dist/leaflet.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// state go here\nimport AnalyticsState from \"./context/analyticsContext/AnalyticsState\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <AnalyticsState>\n            <App />\n        </AnalyticsState>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}